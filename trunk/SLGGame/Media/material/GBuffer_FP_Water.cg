// Fragment program for distorting a texture using a 3D noise texture
void main(
		float3 noiseCoord			: TEXCOORD0,
		float4 projectionCoord		: TEXCOORD1,
		float3 eyeDir				: TEXCOORD2,
		float3 normal				: TEXCOORD3,
		float2 texUv				: TEXCOORD4,
		float3 viewpos				: TEXCOORD5,
		
		out float4 oColour1	: COLOR0,
		out float4 oColour2 : COLOR1,
		out float4 oColour3 : COLOR2,
		
		uniform	float	farChip,
		uniform float normalNoiseScale,
		uniform float noiseScale, 
		uniform float fresnelBias,
		uniform float fresnelScale,
		uniform float fresnelPower,
		uniform float3 waterColor,
		uniform sampler2D noiseMap : register(s0),
		uniform sampler2D reflectMap : register(s1),
		uniform sampler2D noramlMap : register(s2)
		)
{
	// Do the tex projection manually so we can distort _after_
	float2 final = projectionCoord.xy / projectionCoord.w;

	// Noise
	float3 noiseNormal = (tex2D(noiseMap, (noiseCoord.xy / 5)).rgb - 0.5).rbg * noiseScale;
	final += noiseNormal.xz;

	// Fresnel
	//normal = normalize(normal + noiseNormal.xz);
	float fresnel = fresnelBias + fresnelScale * pow(1 + dot(eyeDir, normal), fresnelPower);

	// Reflection
	float3 reflectionColour = tex2D(reflectMap, final).rgb;
	float3 col =  lerp(waterColor, reflectionColour, fresnel);

	float depth = -viewpos.z / farChip;
	float depthl = frac(depth * 256.0);
	depth = depth - depthl / 256.0;

	noiseNormal = (tex2D(noiseMap, (noiseCoord.xy / 5)).rgb - 0.5).rbg * normalNoiseScale;
	float2 finaluv = texUv + noiseNormal.xz;
	
	float3 worldnormal = tex2D(noramlMap, finaluv).rbg;
	
	oColour1 = float4(worldnormal, depth);
	oColour2 = float4(col, depthl);
	oColour3 = float4(0.4, 1.0, 0.4, 1.0);
}