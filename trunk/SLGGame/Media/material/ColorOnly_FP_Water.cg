// Fragment program for distorting a texture using a 3D noise texture
void main(
		float3 noiseCoord			: TEXCOORD0,
		float4 projectionCoord		: TEXCOORD1,
		float3 eyeDir				: TEXCOORD2,
		float3 normal				: TEXCOORD3,
		
		out float4 col		: COLOR,
		
		uniform float noiseScale, 
		uniform float fresnelBias,
		uniform float fresnelScale,
		uniform float fresnelPower,
		uniform float texnoiseScale,
		uniform sampler2D noiseMap : register(s0),
		uniform sampler2D reflectMap : register(s1)
		)
{
	// Do the tex projection manually so we can distort _after_
	float2 final = projectionCoord.xy / projectionCoord.w;

	// Noise
	float3 noiseNormal = (tex2D(noiseMap, (noiseCoord.xy / 5)).rgb - 0.5).rbg * noiseScale;
	final += noiseNormal.xz;

	// Fresnel
	//normal = normalize(normal + noiseNormal.xz);
	float fresnel = fresnelBias + fresnelScale * pow(1 + dot(eyeDir, normal), fresnelPower);

	// Reflection / refraction
	float4 reflectionColour = tex2D(reflectMap, final);
	//float4 refractionColour = tex2D(refractMap, final) + tintColour;
	float4 vertexColour = float4(0.2,0.2,0.8,1.0);

	// Final colour
	//col = lerp(refractionColour, reflectionColour, fresnel);
	col = lerp(vertexColour, reflectionColour, fresnel);


}