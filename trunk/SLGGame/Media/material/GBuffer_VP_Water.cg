// Vertex program for fresnel reflections / refractions
void main(
		float4 position	:	POSITION,
		float4 normal		: NORMAL,
		float2 tex			: TEXCOORD0,
		
		out	float4	oPosition	:	POSITION,
		out float3 noiseCoord : TEXCOORD0,
		out float4 projectionCoord : TEXCOORD1,
		out float3 oEyeDir : TEXCOORD2, 
		out float3 oNormal : TEXCOORD3, 
		out float2 oTexUv		:	TEXCOORD4,
		out	float3	oViewPos	:	TEXCOORD5,

		uniform float4x4 worldViewProj,
		uniform	float4x4	worldView,
		uniform float3 eyePosition, // object space
		uniform float timeVal,
		uniform float scale,  // the amount to scale the noise texture by
		uniform float scroll, // the amount by which to scroll the noise
		uniform float noise,  // the noise perturb as a factor of the  time
		uniform float uSpeed,
		uniform float vSpeed
		)
{
	oPosition = mul(worldViewProj, position);
	// Projective texture coordinates, adjust for mapping
	float4x4 scalemat = float4x4(0.5,   0,   0, 0.5, 
	                               0,-0.5,   0, 0.5,
								   0,   0, 0.5, 0.5,
								   0,   0,   0,   1);
	projectionCoord = mul(scalemat, oPosition);
	// Noise map coords
	noiseCoord.xy = (tex + (timeVal * scroll)) * scale;
	noiseCoord.z = noise * timeVal;

	oEyeDir = normalize(position.xyz - eyePosition); 
	oNormal = normal.rgb; 
	
	float4 viewpos = mul(worldView, position);
	oViewPos =  viewpos.xyz / viewpos.w;
	oTexUv = (tex + timeVal * float2(uSpeed, vSpeed)) * scale;
}